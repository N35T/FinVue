@using FinVue.Core.DataTransferObjects
@using FinVue.Core.Services
@using FinVue.Core.Entities
@using FinVue.Core.Enums
@using System.Globalization

<script>
    function toggleTransactionList(group, id) {
        if (group.classList.contains("active")) {
            group.firstElementChild.innerHTML = ">";
        } else {
            group.firstElementChild.innerHTML = "v";
        }
        group.classList.toggle("active");
        document.getElementById(id).classList.toggle("active");
    }
</script>

<div class="group-table back2">
    @if (Planned) {
        @if (RecurringTransactions is null) {
            <h1>No Planned Transactions Available</h1>
        } else {
            <h1 class="group planned">Outstanding</h1>
            <div class="transaction-list active">
                @foreach (RecurringTransactionDto rt in RecurringTransactions.Where(r => r.PayedThisMonth is false)) {
                    string type = "color-primary";
                    @if (rt.Type == TransactionType.Outcome) type = "color-red";
                    <div class="transaction">
                        <div>
                            <h3>@rt.Name</h3>
                            <p class="low-opac @type">@rt.Type</p>
                        </div>
                        <div>
                            <h3>@NumberToCurrency(rt.ValueInCent)</h3>
                            <p class="low-opac">Every @rt.MonthFrequency Months</p>
                            <button class="color-primary complete">Done</button>
                        </div>
                    </div>
                }
            </div>
            <h1 class="group planned">Completed</h1>
            <div class="transaction-list active">
                @foreach (RecurringTransactionDto rt in RecurringTransactions.Where(r => r.PayedThisMonth is true)) {
                    <div class="transaction">
                        <div>
                            <h3 class="low-opac">@rt.Name</h3>
                            <p class="low-opac">@rt.Type</p>
                        </div>
                        <div>
                            <h3 class="low-opac">@NumberToCurrency(rt.ValueInCent)</h3>
                            <p class="low-opac">Every @rt.MonthFrequency Months</p>
                        </div>
                    </div>
                }
            </div>
        }
    } else if (TransactionsByCategory is null) {
        <h1>No Transactions Available</h1>
    } else {
        @foreach (TransactionsByCategoryDto group in TransactionsByCategory) {
            <h1 class="group" style="color: #@group.CategoryColor" onclick="toggleTransactionList(this, '@group.CategoryName')"><span>></span> @group.CategoryName <span class="low-opac">@NumberToCurrency(group.TotalSum)</span></h1>
            <div class="transaction-list" id="@group.CategoryName">
                @foreach (Transaction t in group.Transactions) {
                    <div class="transaction">
                        <div>
                            <h3>@t.Name</h3>
                            <p class="low-opac">@t.PayDate.ToString()</p>
                        </div>
                        <div>
                            <h3>@NumberToCurrency(t.ValueInCent)</h3>
                            <p class="low-opac">@t.PaymentMethod</p>
                            <p>@t.PayingUser.Username</p>
                        </div>
                    </div>
                }
            </div>
        }
    }
</div>




@code {

    [Parameter]
    public List<TransactionsByCategoryDto>? TransactionsByCategory { get; set; }

    [Parameter]
    public List<RecurringTransactionDto>? RecurringTransactions { get; set; }

    [Parameter]
    public bool Planned { get; set; } = false;

    public string NumberToCurrency(int valueInCent) {
        return (valueInCent/100.0).ToString("C", CultureInfo.GetCultureInfoByIetfLanguageTag("de-DE"));
    }
}