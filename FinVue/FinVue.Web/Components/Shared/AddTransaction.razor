@using FinVue.Core.DataTransferObjects
@using FinVue.Core.Services
@using FinVue.Core.Entities
@using FinVue.Core.Enums
@using System.Globalization

@inject CategoryService CategoryService

<div class="">
    <h1 class="color-primary">New Transaction</h1>
    
    @if (Rt is null) {
        <div class="inputs">
            <div>
                <div class="input">
                    <label for="fname" class="low-opac">Name</label>
                    <input id="fname" required />
                </div>
                <div class="input">
                    <label for="fpaydate" class="low-opac">Pay Date</label>
                    <input id="fpaydate" type="date" required />
                </div>
                <div class="input">
                    <label for="ftype" class="low-opac">Type</label>
                    <input id="ftype" required />
                </div>
            </div>
            <div>
                <div class="input">
                    <label for="fvalue" class="low-opac">Value</label>
                    <input id="fvalue" required />
                </div>
                <div class="input">
                    <label for="fpayinguser" class="low-opac">Paying User</label>
                    <input id="fpayinguser" required />
                </div>
                <div class="input">
                    <label for="fpaymethod" class="low-opac">Pay Method</label>
                    <input id="fpaymethod" required />
                </div>
            </div>

            <div class="input span-cols">
                <label for="fcategory" class="low-opac">Category</label>
                <input id="fcategory" required class="dropdown" />
                <a href="javascript:void(0)" class="dropbtn">Dropdown</a>
                <div class="dropdown-content">
                    @foreach(Category cat in Categories) {
                        <a style="color:@cat.CategoryColor" href="">@cat.Name</a>
                    }
                </div>
            </div>
        </div>
    } else {
        <div class="inputs">
            <div>
                <div class="input">
                    <label for="fname" class="low-opac">Name</label>
                    <input id="fname" class="low-opac" readonly value="@Rt.Name" />
                </div>
                <div class="input">
                    <label for="fpaydate" class="low-opac">Pay Date</label>
                    <input id="fpaydate" type="date" required value="@DateTime.Now.Date.ToString("yyyy-MM-dd")" />
                </div>
                <div class="input">
                    <label for="ftype" class="low-opac">Type</label>
                    <input id="ftype" class="low-opac" readonly value="@Rt.Type" />
                </div>
            </div>
            <div>
                <div class="input">
                    <label for="fvalue" class="low-opac">Value</label>
                    <input id="fvalue" required value="@Rt.ValueInCent" />
                </div>
                <div class="input">
                    <label for="fpayinguser" class="low-opac">Paying User</label>
                    <input id="fpayinguser" class="low-opac" readonly />
                </div>
                <div class="input">
                    <label for="fpaymethod" class="low-opac">Pay Method</label>
                    <input id="fpaymethod" class="low-opac" readonly value="@PaymentMethod.Transfer" />
                </div>
            </div>

            <div class="input span-cols">
                <label for="fcategory" class="low-opac">Category</label>
                <input id="fcategory" class="low-opac" readonly value="@Rt.Category?.Name" />
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public RecurringTransactionDto? Rt { get; set; }

    public List<Category> Categories{ get; set; }
    public List<User> Users { get; set; }

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();

        InitializeDropdowns();

    }

    private async void InitializeDropdowns() {
        //Users
        Categories = await CategoryService.GetAllCategoriesAsync();
    }
}