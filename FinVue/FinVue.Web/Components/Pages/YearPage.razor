@using FinVue.Web.Components.Layout
@using FinVue.Web.Components.Shared
@using Newtonsoft.Json
@using FinVue.Core.Services
@using FinVue.Core.Enums
@using FinVue.Core.DataTransferObjects
@using System.Globalization
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Axes.Ticks
@using ChartJs.Blazor.Common.Handlers
@using ChartJs.Blazor.Interop
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.PieChart
@using FinVue.Web.Auth
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize(Roles = Roles.AccessRole)]

@page "/"
@page "/year"
@page "/year/{Year:int}"

@inject TransactionService TransactionService

<PageTitle>@Year - Übersicht</PageTitle>

<SideNav Year="@Year" />

<section id="view-content">
    <h1 class="span-cols align-left category-select">Alle Kategorien</h1>
    <div>
        <ProfitCard Title="Einkommen (Gesamt)" Value="@TotalIncome" AverageValue="@AverageIncome"/>
    </div>
    <div>
        <ProfitCard Title="Ausgaben (Gesamt)" ReverseColors="true" Value="@TotalOutcome" AverageValue="@AverageOutcome"/>
    </div>
    <div>
    <ProfitCard Title="Profit (Gesamt)" Value="@TotalProfit" AverageValue="@AverageProfit"/>
    </div>
    
    
    <!--<canvas id="profit-chart" class="span-cols back2" style="width:100%; height: 20rem"></canvas>
    
    <canvas id="category-sums-chart" class="span-cols back2" style="width:100%; height: 20rem"></canvas>-->
    
    <Chart Config="ProfitChartConfig" @ref="ProfitChart"></Chart>
    <Chart Config="CategoryChartConfig" @ref="CategoryChart"></Chart>
    
</section>
<script>
function handleAxisScale(value, index, values) {
    return numberToCurrency(value, true);
}

function numberToCurrency(num, noComma = false) {
    return Intl.NumberFormat('de-DE',{currency:"EUR", style:"currency", maximumFractionDigits: noComma ? 0 : 2}).format(num);
}
</script>

@code {

    [Parameter]
    public int Year { get; set; }
    
    public List<int> IncomeSumsPerMonth { get; set; }
    public List<int> OutcomeSumsPerMonth { get; set; }
    public int[] ProfitSumsPerMonth { get; set; }
    public int[] CumulatedProfitPerMonth { get; set; }
    
    public string TotalIncome { get; set; }
    public string AverageIncome { get; set; }
    
    public string TotalOutcome { get; set; }
    public string AverageOutcome { get; set; }
    
    public string TotalProfit { get; set; }
    public string AverageProfit { get; set; }
    
    public List<SumByCategoryDto> OutcomeByCategory { get; set; }

    public LineConfig ProfitChartConfig { get; set; }
    public Chart ProfitChart { get; set; }
    public PieConfig CategoryChartConfig { get; set; }
    public Chart CategoryChart { get; set; }
    
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        Year = Year == 0 ? DateTime.Now.Year : Year;

        await InitializeData();
        InitializeProfitCards();

        InitializeLineDiagram();
        InitializeCakeDiagram();

    }

    private void InitializeCakeDiagram()
    {
        CategoryChartConfig = new PieConfig();
        foreach (var category in OutcomeByCategory) {
            CategoryChartConfig.Data.Labels.Add(category.CategoryName);
        }

        CategoryChartConfig.Data.Datasets.Add(new PieDataset<int>(OutcomeByCategory.Select(e => e.TotalSum / 100).ToList()) {
            BackgroundColor = new IndexableOption<string>(OutcomeByCategory.Select(e => e.CategoryColor.Hex).ToArray())
        });
    }

    private void InitializeLineDiagram() {
        ProfitChartConfig = new LineConfig() {
            Options = new LineOptions() {
                Legend = new Legend() {
                    Display = true
                },
                Scales = new Scales() {
                    YAxes = new List<CartesianAxis>() {
                        new CategoryAxis() {
                            Ticks = new CategoryTicks() {
                                Callback = new JavaScriptHandler<AxisTickCallback>("handleAxisScale")
                            }
                        }
                    }
                },
                Tooltips = new Tooltips() {
                    Enabled = true
                }
            }
        };
        
        ProfitChartConfig.Data.Datasets.Add(new LineDataset<int>(OutcomeSumsPerMonth) {
            Label = "Ausgaben",
            BorderColor = "#ac4d4d",
            Fill = false,
        });
        ProfitChartConfig.Data.Datasets.Add(new LineDataset<int>(IncomeSumsPerMonth) {
            Label = "Einkommen",
            BorderColor = "#81a975",
            Fill = false,
        });
        ProfitChartConfig.Data.Datasets.Add(new LineDataset<int>(ProfitSumsPerMonth) {
            Label = "Profit pro Monat",
            BorderColor = "#ede3e390",
            Fill = false,
        });
        ProfitChartConfig.Data.Datasets.Add(new LineDataset<int>(CumulatedProfitPerMonth) {
            Label = "Kumulierter Profit",
            BorderColor = "#33aad6",
            Fill = false,
        });
        
        ProfitChartConfig.Data.XLabels.Add("Jan");
        ProfitChartConfig.Data.XLabels.Add("Feb");
        ProfitChartConfig.Data.XLabels.Add("Mär");
        ProfitChartConfig.Data.XLabels.Add("Apr");
        ProfitChartConfig.Data.XLabels.Add("Mai");
        ProfitChartConfig.Data.XLabels.Add("Jun");
        ProfitChartConfig.Data.XLabels.Add("Jul");
        ProfitChartConfig.Data.XLabels.Add("Aug");
        ProfitChartConfig.Data.XLabels.Add("Sep");
        ProfitChartConfig.Data.XLabels.Add("Okt");
        ProfitChartConfig.Data.XLabels.Add("Nov");
        ProfitChartConfig.Data.XLabels.Add("Dez");
    }

    private async Task InitializeData() {
        IncomeSumsPerMonth = await TransactionService.GetTotalSumFromYearAndAllRelevantMonthsAsync(TransactionType.Einkommen, Year);
        OutcomeSumsPerMonth = await TransactionService.GetTotalSumFromYearAndAllRelevantMonthsAsync(TransactionType.Ausgaben, Year);
        var maxLength = Math.Max(Math.Max(IncomeSumsPerMonth.Count, OutcomeSumsPerMonth.Count), 1);
        while (IncomeSumsPerMonth.Count < maxLength) {
            IncomeSumsPerMonth.Add(0);
        }

        while (OutcomeSumsPerMonth.Count < maxLength) {
            OutcomeSumsPerMonth.Add(0);
        }

        ProfitSumsPerMonth = new int[maxLength];        
        CumulatedProfitPerMonth = new int[maxLength];
        ProfitSumsPerMonth[0] = IncomeSumsPerMonth[0] - OutcomeSumsPerMonth[0];
        CumulatedProfitPerMonth[0] = ProfitSumsPerMonth[0];
        for (int i = 1; i < maxLength; ++i) {
            ProfitSumsPerMonth[i] = IncomeSumsPerMonth[i] - OutcomeSumsPerMonth[i];
            CumulatedProfitPerMonth[i] = CumulatedProfitPerMonth[i-1] + ProfitSumsPerMonth[i];
        }
        
        OutcomeByCategory = await TransactionService.GetTotalSumsFromYearGroupedByCategoryAsync(Year, TransactionType.Ausgaben);
    }
    
    private void InitializeProfitCards() {
        var income = IncomeSumsPerMonth.Sum() / 100.0;
        var outcome = OutcomeSumsPerMonth.Sum() / 100.0;

        TotalIncome = income.ToString("C", CultureInfo.GetCultureInfoByIetfLanguageTag("de-DE"));
        TotalOutcome = outcome.ToString("C", CultureInfo.GetCultureInfoByIetfLanguageTag("de-DE"));
        TotalProfit = (income - outcome).ToString("C", CultureInfo.GetCultureInfoByIetfLanguageTag("de-DE"));
        
        var avgIncome = IncomeSumsPerMonth.Average() / 100.0;
        var avgOutcome = OutcomeSumsPerMonth.Average() / 100.0;

        AverageIncome = avgIncome.ToString("C", CultureInfo.GetCultureInfoByIetfLanguageTag("de-DE"));
        AverageOutcome = avgOutcome.ToString("C", CultureInfo.GetCultureInfoByIetfLanguageTag("de-DE"));
        AverageProfit = (avgIncome - avgOutcome).ToString("C", CultureInfo.GetCultureInfoByIetfLanguageTag("de-DE"));
    }

    public String NumberToCurrency(double number, bool test) {
        return number.ToString();
    }
}